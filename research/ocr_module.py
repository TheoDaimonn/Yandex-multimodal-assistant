import os
import base64
import requests
import time
from PIL import Image
from pdf2image import convert_from_path
from io import BytesIO
from dotenv import load_dotenv
import json
import shutil  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º shutil –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_KEY = os.getenv('API_KEY')
RECOGNIZE_URL = 'https://ocr.api.cloud.yandex.net/ocr/v1/recognizeText'
MAX_RETRIES = 10
RETRY_DELAY = 15
TEMP_IMAGES_DIR = "temp_images"

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(TEMP_IMAGES_DIR, exist_ok=True)

def pdf_to_images(pdf_path: str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ."""
    try:
        images = convert_from_path(pdf_path)
        image_paths = []
        for i, image in enumerate(images):
            image_path = os.path.join(TEMP_IMAGES_DIR, f"page_{i + 1}.jpg")
            image.save(image_path, "JPEG")
            image_paths.append(image_path)
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")
        return image_paths
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF: {str(e)}")
        return []

def call_api(url, data):
    """–í—ã–∑–æ–≤ API."""
    headers = {
        "Authorization": f"Api-Key {API_KEY}"
    }
    response = requests.post(url, json=data, headers=headers)
    return response.json()

def ocr(image: Image.Image):
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é OCR API."""
    buffer = BytesIO()
    image.save(buffer, format="JPEG")
    myimage = buffer.getvalue()

    j = {
        "mimeType": "JPEG",
        "languageCodes": ["ru"],
        "model": "handwritten",
        "content": base64.b64encode(myimage).decode('utf-8')
    }
    res = call_api(RECOGNIZE_URL, j)
    return res

def save_json_response(response, output_path):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON-–æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª."""
    with open(output_path, 'w', encoding='utf-8') as json_file:
        json.dump(response, json_file, ensure_ascii=False, indent=4)
        print(f"JSON –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_path}")

def clear_temp_folder(folder_path):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏."""
    if os.path.exists(folder_path):
        shutil.rmtree(folder_path)  # –£–¥–∞–ª—è–µ–º –≤—Å—é –ø–∞–ø–∫—É –∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        os.makedirs(folder_path)  # –°–Ω–æ–≤–∞ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞: {folder_path}")

def extract_text_from_response(response):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç API."""
    extracted_text = []
    if 'result' in response and 'textAnnotation' in response['result']:
        text_annotation = response['result']['textAnnotation']
        blocks = text_annotation.get('blocks', [])
        
        for block in blocks:
            for line in block.get('lines', []):
                extracted_text.append(line.get('text', ''))
    return "\n".join(extracted_text)

def process_pdf(pdf_path: str):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    image_paths = pdf_to_images(pdf_path)

    all_text = []
    json_responses = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–æ–≤

    for image_path in image_paths:
        with Image.open(image_path).convert("RGB") as img:

            for attempt in range(MAX_RETRIES):
                result = ocr(img)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                json_responses.append(result)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç JSON –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                extracted_text = extract_text_from_response(result)
                if extracted_text:
                    all_text.append(extracted_text)
                    print(extracted_text)
                    print(f"–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –Ω–∞ {image_path}")
                    break
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES} –¥–ª—è {image_path}")
                time.sleep(RETRY_DELAY)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ {image_path}. –û—Ç–≤–µ—Ç: {result}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
    if all_text:
        output_path = os.path.join("data/ocred_pdf", os.path.basename(pdf_path).replace(".pdf", ".txt"))
        os.makedirs("data/ocred_pdf", exist_ok=True)
        with open(output_path, "w", encoding="utf-8") as f:
            f.write("\n\n".join(all_text))
        print(f"‚úÖ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ JSON –æ—Ç–≤–µ—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    json_output_path = os.path.join("data/ocred_pdf", os.path.basename(pdf_path).replace(".pdf", "_responses.json"))
    save_json_response(json_responses, json_output_path)

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    clear_temp_folder(TEMP_IMAGES_DIR)

if __name__ == "__main__":
    print(os.listdir('data/pdf'))
    for i in os.listdir('data/pdf'):
        process_pdf('data/pdf/'+i)
