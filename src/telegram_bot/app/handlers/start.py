import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import Router

from src.telegram_bot.app.loader import dp, bot, UserStates, authorized_users, pending_users, ADMIN_ID
from src.telegram_bot.app.utils.auth import save_authorized_users
from src.telegram_bot.app.handlers.admin import is_admin
from src.telegram_bot.app.config import config
from src.telegram_bot.app.utils.keyboards import create_inline_keyboard
# from app.handlers.search import handle_search

router = Router()
router.name = 'start'

@router.message(F.text, F.text.startswith('/start'))
async def start_cmd(message: Message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wiki –ü–æ–∏—Å–∫!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –ø–æ—Ä—Ç–∞–ª–µ Wiki.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "
        "–æ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
    )
    await message.answer(welcome_text)


@router.message(F.text, ~F.text.startswith('/'))
async def handle_text(message: Message, state: FSMContext):
    global ADMIN_ID
    user_id = message.from_user.id
    username = message.from_user.username

    if user_id not in authorized_users:
        if user_id in pending_users:
            await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if username == config.ADMIN_USERNAME.lstrip('@'):
            ADMIN_ID = user_id
            authorized_users.add(user_id)
            save_authorized_users()
            await state.set_state(UserStates.dialog)
            await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return

        pending_users[user_id] = username
        await state.set_state(UserStates.waiting_for_approval)
        await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        if ADMIN_ID:
            await bot.send_message(
                ADMIN_ID,
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{username} (ID: {user_id})\n"
                f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}",
                reply_markup=create_inline_keyboard(user_id)
            )
        else:
            admin_username = config.ADMIN_USERNAME.lstrip('@')
            logging.warning(f"ADMIN_ID not set, trying to find admin by username: {admin_username}")
            for admin_candidate_id in authorized_users:
                try:
                    admin_info = await bot.get_chat_member(admin_candidate_id, admin_candidate_id)
                    if admin_info.user.username == admin_username:
                        logging.info(f"Found admin by username: {admin_candidate_id}")
                        await bot.send_message(
                            admin_candidate_id,
                            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{username} (ID: {user_id})\n"
                            f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}",
                            reply_markup=create_inline_keyboard(user_id)
                        )
                        break
                except Exception as e:
                    logging.error(f"Error checking admin candidate: {e}")
        return

    # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    current_state = await state.get_state()
    if current_state != UserStates.dialog:
        await state.set_state(UserStates.dialog)

    await message.answer("tropa tripi")


@router.message(F.text, F.text.startswith('/status'))
async def status_cmd(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    status = []
    if await is_admin(user_id, username):
        status.append("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    if user_id in authorized_users:
        status.append("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if user_id in pending_users:
        status.append("–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    if status:
        await message.answer(f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {', '.join(status)}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞")

