import asyncio
import logging
import json
from aiogram import F
from aiogram.types import Message, ContentType
from aiogram import Router
from sqlalchemy import update
from src.telegram_bot.app.models.models import User
from src.telegram_bot.app.dao.user_dao import UserDAO

from src.telegram_bot.app.handlers.answer_to_user import answer_to_user_func
from src.telegram_bot.app.utils.profile_query import profile_query
from src.telegram_bot.app.utils.speech import transcribe_ya_speechkit

import asyncio
import os
import aiohttp

from src.telegram_bot.app.loader import bot

router = Router()
router.name = 'start'

DOWNLOAD_DIR = "downloads"

WELCOME = (
    "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø –±–æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ **–ú–ê–ò**.\n\n"
    "üîç –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è ‚Äî –æ—Ç –ø—Ä–æ—Ö–æ–¥–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–æ –æ–±—â–µ–∂–∏—Ç–∏—è.\n"
    "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∞ —è –±—ã—Å—Ç—Ä–æ –ø–æ–¥–±–µ—Ä—É –æ—Ç–≤–µ—Ç—ã!\n\n"
    "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "‚Ä¢ /start ‚Äî üöÄ –°—Ç–∞—Ä—Ç\n"
    "‚Ä¢ /instruction ‚Äî üìë –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
    "‚Ä¢ /help ‚Äî üÜò –ü–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n\n"
    "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ö–æ—Ç—å –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º üôÇ"
)

INSTRUCTION = (
    "üìë *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*\n\n"
    "1Ô∏è‚É£  –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º ‚Äî —è –æ—Ç–≤–µ—á—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (–∏–ª–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ üòé)\n"
    "2Ô∏è‚É£  –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "   ‚Ä¢ /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    "   ‚Ä¢ /instruction ‚Äî —ç—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
    "   ‚Ä¢ /help ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n\n"
    "üí° *–°–æ–≤–µ—Ç—ã:*\n"
    "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: _¬´–∫–∞–∫–æ–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –Ω–∞ 2024?¬ª_\n"
    "‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
    "‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∂–∏–≤–∞—è –ø–æ–º–æ—â—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.\n"
)

HELP = (
    "üÜò *–ü–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞*\n\n"
    "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏.\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ç–∞–∫ –º—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ–∂–µ–º\n"
    "[–ú–∞–∫—Å–∏–º](https://t.me/hell_lumpen) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –¥–Ω—è –∏ –Ω–æ—á–∏‚ô•Ô∏è"
)



SPEECH_FOLDER_ID = os.environ["FOLDER_ID"]
SPEECH_API_KEY    = os.environ["API_KEY"]

async def transcribe_ya_speechkit(audio_path: str) -> str:
    url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
    params = {"lang":"ru-RU","folderId":SPEECH_FOLDER_ID}
    headers = {"Authorization":f"Api-Key {SPEECH_API_KEY}"}
    async with aiohttp.ClientSession() as session:
        with open(audio_path, "rb") as f:
            data = f.read()
        async with session.post(url, params=params, headers=headers, data=data) as resp:
            result = await resp.json()
            print("STT response:", result)
            return result.get("result", "")
        
@router.message(F.text.startswith('/start'))
async def start_cmd(message: Message, dao: UserDAO):

    user = await dao.get_user_by_tg_id(message.from_user.id)
    if not user:
        user = await dao.create_user(
            tg_id=message.from_user.id,
            username=message.from_user.username
        )
        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.tg_id}")
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user.tg_id}")

    await message.answer(WELCOME)

@router.message(F.content_type == ContentType.TEXT, ~F.text.startswith("/"))
async def text_handler(message: Message, dao: UserDAO):
    tg_id = message.from_user.id
    user, need_summary = await dao.update_user_session(
        tg_id=tg_id,
        new_message=message.text,
        is_bot=False
    )

    if need_summary:
        await asyncio.create_task(
            generate_summary_background(dao, user, tg_id=tg_id)
        )
    print('biba', message.text)
    response = await answer_to_user_func(message.text)

    await dao.update_user_session(
        tg_id=tg_id,
        new_message=response,
        is_bot=True  
    )

    await message.answer(response)

@router.message(F.content_type == ContentType.VOICE)
async def voice_handler(message: Message, dao: UserDAO):
    print('voice_handler')
    tg_id = message.from_user.id
    file = await bot.get_file(message.voice.file_id)
    file_path = file.file_path

    raw_io = await bot.download_file(file_path)   
    local_path = os.path.join(DOWNLOAD_DIR, f"{message.voice.file_id}.ogg")
    with open(local_path, "wb") as f:
        f.write(raw_io.read())     
    
    text = await transcribe_ya_speechkit(local_path)
    print(text)

    try: os.remove(local_path)
    except: pass
    
    if not text:
        return await message.reply("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
    
    await message.answer(f"üìù –≤—ã —Å–∫–∞–∑–∞–ª–∏: ¬´{text}¬ª")
    user, need = await dao.update_user_session(
        tg_id=tg_id, new_message=text, is_bot=False
    )
    if need:
        asyncio.create_task(generate_summary_background(dao, user, tg_id=tg_id))
    resp = await answer_to_user_func(text)
    await dao.update_user_session(
        tg_id=tg_id, new_message=resp, is_bot=True
    )
    await message.answer(resp)

async def generate_summary_background(dao: UserDAO, user: User, tg_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏"""
    try:
        print('–∑–∞—à–ª–∏ –≤ –ø–æ—Ä—Ç—Ä–µ—Ç')
        res = await dao.return_chat_history(tg_id)
        # print(res)
        summary = await profile_query(res) 
        print(summary)  
        await dao.session.execute(update(User).where(User.id == user.id).values(last_summary=summary))
        await dao.session.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")

@router.message(F.text.startswith("/instruction"))
async def instruction_cmd(message: Message):
    await message.answer(INSTRUCTION)

@router.message(F.text.startswith("/help"))
async def help_cmd(message: Message):
    await message.answer(HELP)