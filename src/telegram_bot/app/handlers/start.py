import asyncio
import logging
from aiogram import F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import Router
from datetime import datetime
import answer_to_user
import summarise

from src.telegram_bot.app.loader import bot, UserStates, authorized_users, pending_users
from src.telegram_bot.app.models.models import User
from src.telegram_bot.app.dao.user_dao import UserDAO

router = Router()
router.name = 'start'


@router.message(F.text, F.text.startswith('/start'))
async def start_cmd(message: Message, dao: UserDAO):
    welcome_text = (
        "üëã–±–ª–∞ –±–ª–∞ –±–ª–∞ –ø—Ä–∏–µ–º–∫–∞ –±–ª–∞ –±–ª–∞ –±–ª–∞ \n\n"
    )

    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await dao.create_user(
        tg_id=message.from_user.id,
        username=message.from_user.username
    )

    await message.answer(welcome_text)


@router.message(F.text, ~F.text.startswith('/'))
async def handle_text(message: Message, state: FSMContext, dao: UserDAO):
    tg_id = message.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, need_summary = await dao.update_user_session(
        tg_id=tg_id,
        new_message=message.text
    )

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ - –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏ –≤ —Ñ–æ–Ω–µ
    if need_summary:
        await asyncio.create_task(
            generate_summary_background(dao, user)
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    current_state = await state.get_state()
    if current_state != UserStates.dialog:
        await state.set_state(UserStates.dialog)


    response = await answer_to_user  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    await message.answer(response)


async def generate_summary_background(dao: UserDAO, user: User):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏"""
    try:
        summary = await summarise(user.current_messages)  # –í–∞—à –∞–≥–µ–Ω—Ç
        await dao.session.execute(update(User).where(User.id == user.id).values(last_summary=summary)
        )
        await dao.session.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")


async def generate_response(context: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    if context.get('summary'):
        return "tropa tripi"  # –ó–∞–≥–ª—É—à–∫–∞